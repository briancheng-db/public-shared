trigger:
- dab_tamplate_wo_tf

parameters:
- name: is_run_after_deploy
  displayName: 'Run Job After Deployment'
  type: string
  default: 'false'
  values:
  - 'true'
  - 'false'
- name: job_name
  displayName: 'Job Name to Run'
  type: string
  default: 'dab_table_select_job'
- name: working_directory
  displayName: 'Working Directory'
  type: string
  default: '$(System.DefaultWorkingDirectory)/dab_sample'

pool:
  name: dbxbcpool

variables:
  - group: scb-demo    # Reference to the variable group
  - name: target
    value: 'module.db_workspace' # Specify the target module/resource here
  - name: DATABRICKS_AZURE_RESOURCE_ID
    value: $(databricks_azure_resource_id)

steps:
# Step 0: Install az command
- task: Bash@3
  displayName: 'Install az command'
  inputs:
    targetType: 'inline'
    script: |
      curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

# Step 0.25: Install Required Packages
- task: Bash@3
  displayName: 'Install Required Packages'
  inputs:
    targetType: 'inline'
    script: |
      echo "Installing required packages..."
      sudo apt-get update
      sudo apt-get install -y unzip curl wget ca-certificates
      echo "Required packages installed successfully."

# Step 0.5: Install Databricks CLI
- task: Bash@3
  displayName: 'Install Databricks CLI'
  inputs:
    targetType: 'inline'
    script: |
      echo "Installing Databricks CLI..."
      curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sudo sh
      echo 'export PATH="/home/vsts/.local/bin:$PATH"' >> ~/.bashrc
      source ~/.bashrc
      databricks --version

# Step 1: Login to Azure
- task: Bash@3
  displayName: 'Interactive Login to Azure'
  inputs:
    targetType: 'inline'
    script: |
      echo "Logging in to Azure interactively..."
      az login --use-device-code
      az account set --subscription $(subscription_id)

# Step 2: Validate Databricks Asset Bundle
- task: Bash@3
  displayName: 'Validate Databricks Asset Bundle'
  inputs:
    targetType: 'inline'
    workingDirectory: '${{ parameters.working_directory }}'
    script: |
      echo "Validating Databricks Asset Bundle..."
      databricks bundle validate -t $target
      echo "Bundle validation completed successfully."

# Step 3: Deploy Databricks Asset Bundle
- task: Bash@3
  displayName: 'Deploy Databricks Asset Bundle'
  inputs:
    targetType: 'inline'
    workingDirectory: '${{ parameters.working_directory }}'
    script: |
      echo "Deploying Databricks Asset Bundle..."
      databricks bundle deploy -t $target
      echo "Bundle deployment completed successfully."

# Step 4: Run Databricks Job (Conditional)
- task: Bash@3
  displayName: 'Run Databricks Job'
  condition: and(succeeded(), eq('${{ parameters.is_run_after_deploy }}', 'true'))
  inputs:
    targetType: 'inline'
    workingDirectory: '${{ parameters.working_directory }}'
    script: |
      echo "Running Databricks job after deployment..."
      if [ -n "${{ parameters.job_name }}" ]; then
        databricks bundle run ${{ parameters.job_name }} -t $target --no-wait
        echo "Job execution initiated successfully."
      else
        echo "No job name specified, skipping job execution."
      fi